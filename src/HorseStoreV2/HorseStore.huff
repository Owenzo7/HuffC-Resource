/* import */
#include "../../lib/huffmate/src/data-structures/Hashmap.huff"


/* HorseStore Interface */

#define function mintHorse() nonpayable returns()
#define function feedHorse(uint256) nonpayable returns()
#define function isHappyHorse(uint256) view returns(bool)
#define function horseIdToFedTimeStamp(uint256) view returns(uint256)
#define function HORSE_HAPPY_IF_FED_WITHIN() view returns(uint256)

// Storage slot

#define constant HORSE_FED_TIMESTAMP_LOCATION = FREE_STORAGE_POINTER() // storage slot for the mapping..


#define macro FEED_HORSE() = takes(0) returns(0) {

    timestamp // [timestamp]
    0x04      // [0x04, timestamp]
    calldataload // [horseId, timestamp]

    // sstore the timestamp with the horseId key...
    [HORSE_FED_TIMESTAMP_LOCATION] // [HORSE_FED_TIMESTAMP_LOCATION, horseId, timestamp]
    STORE_ELEMENT_FROM_KEYS(0x00)  // []
    stop
    
}

#define macro MAIN() = takes(0) returns(0) {
    0x00
    calldataload
    0xE0
    shr   // [func_selector]

    dup1
    __FUNC_SIG(mintHorse)
    eq
    mintHorse
    jumpi

    dup1
    __FUNC_SIG(feedHorse)
    eq
    feedHorse
    jumpi

    dup1
    __FUNC_SIG(isHappyHorse)
    eq
    isHappyHorse
    jumpi

    dup1
    __FUNC_SIG(horseIdToFedTimeStamp)
    eq
    horseIdToFedTimeStamp
    jumpi

    dup1
    __FUNC_SIG(HORSE_HAPPY_IF_FED_WITHIN)
    eq
    horseHappyFedWithin
    jumpi

    // mintHorse()
    // feedHorse(uint256 horseId)
    // isHappyHorse(uint256 horseId)
    // horseIdToFedTimeStamp(uint256 horseId)
    // HORSE_HAPPY_IF_FED_WITHIN


    feedHorse:
        FEED_HORSE()
    mintHorse:
        MINT_HORSE()
    isHappyHorse:
        IS_HAPPY_HORSE()
    horseIdToFedTimeStamp:
        GET_HORSE_FED_TIMESTAMP()
    horseHappyFedWithin:
        HORSE_HAPPY_FED_WITHIN()

    
}